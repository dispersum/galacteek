name: galacteek

on:
  push:
    branches: [ master, winbuild, winbuild-ci ]
  pull_request:
    branches: [ master ]

env:
  GO_IPFS_VERSION: 0.7.0
  FS_MIGRATE_VERSION: 1.6.4

jobs:
  build:
    needs: create_release
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-18.04, macos-latest, windows-latest]

    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python 3.7
      uses: actions/setup-python@v2
      with:
        python-version: 3.7

    - name: Install packages
      if: startsWith(matrix.os, 'ubuntu')
      run: |
        sudo apt-get install -y dzen2 xvfb herbstluftwm
        sudo apt-get install -y libxcb-xkb1 libxkbcommon-x11-0
        sudo apt-get install -y libzbar0

    - name: Install unzip (Windows)
      if: startsWith(matrix.os, 'windows')
      uses: crazy-max/ghaction-chocolatey@v1
      with:
        args: install unzip

    - name: Install wget (Windows)
      if: startsWith(matrix.os, 'windows')
      uses: crazy-max/ghaction-chocolatey@v1
      with:
        args: install wget

    - name: Install 7zip (Windows)
      if: startsWith(matrix.os, 'windows')
      uses: crazy-max/ghaction-chocolatey@v1
      with:
        args: install 7zip.portable

    - name: Configure environment (1)
      run: |
        echo "G_VERSION=$(cat galacteek/version)" >> $GITHUB_ENV

        echo "COMMIT_SHORT=$(echo $GITHUB_SHA|cut -c 1-8)" >> $GITHUB_ENV
        echo "GIT_BRANCH=${GITHUB_REF##*/}" >> $GITHUB_ENV
        echo "GLK_ASSETS=$GITHUB_WORKSPACE/assets" >> $GITHUB_ENV

        mkdir "$GITHUB_WORKSPACE/assets"
      shell: bash

    - name: Configure environment (2)
      run: |
        echo "G_WHEEL_PATH=dist/galacteek-$G_VERSION-py3-none-any.whl" >> $GITHUB_ENV
      shell: bash

    - name: Configure bundle (a)
      run: |
        echo "BUNDLE_ROOT=Galacteek-${COMMIT_SHORT}" >> $GITHUB_ENV
      shell: bash

    - name: Configure bundle(b)
      if: startsWith( github.ref, 'refs/tags/releases/v')
      run: |
        echo "BUNDLE_ROOT=Galacteek-${G_VERSION}" >> $GITHUB_ENV
      shell: bash

    - name: OS-specific vars (linux)
      if: startsWith(matrix.os, 'ubuntu')
      run: |
        echo "IPFS_DIST_OS=linux" >> $GITHUB_ENV
        echo "BUNDLE_FILENAME=${BUNDLE_ROOT}-x86_64.AppImage" >> $GITHUB_ENV
        echo "BUNDLE_PATH=${GLK_ASSETS}/${BUNDLE_ROOT}-x86_64.AppImage" >> $GITHUB_ENV

    - name: OS-specific vars (macOS)
      if: startsWith(matrix.os, 'macOS')
      run: |
        echo "IPFS_DIST_OS=darwin" >> $GITHUB_ENV
        echo "BUNDLE_FILENAME=${BUNDLE_ROOT}-x86_64.dmg" >> $GITHUB_ENV
        echo "BUNDLE_PATH=${GLK_ASSETS}/${BUNDLE_ROOT}-x86_64.dmg" >> $GITHUB_ENV

    - name: OS-specific vars (win)
      if: startsWith(matrix.os, 'windows')
      run: |
        # We create 2 versions (one-file and zipped folder)
        echo "IPFS_DIST_OS=windows" >> $GITHUB_ENV

        echo "BUNDLE_FILENAME=${BUNDLE_ROOT}-windows-x86_64.exe" >> $GITHUB_ENV
        echo "BUNDLE_PATH=${GLK_ASSETS}/${BUNDLE_ROOT}-windows-x86_64.exe" >> $GITHUB_ENV

        echo "BUNDLE_EXTRA_FILENAME=${BUNDLE_ROOT}-windows-x86_64.zip" >> $GITHUB_ENV
        echo "BUNDLE_EXTRA_PATH=${GLK_ASSETS}/${BUNDLE_ROOT}-windows-x86_64.zip" >> $GITHUB_ENV
      shell: bash

    - name: Fetch IPFS dists
      if: startsWith(matrix.os, 'ubuntu') || startsWith(matrix.os, 'mac')
      run: |
        wget https://dist.ipfs.io/go-ipfs/v${GO_IPFS_VERSION}/go-ipfs_v${GO_IPFS_VERSION}_${IPFS_DIST_OS}-amd64.tar.gz

        wget https://dist.ipfs.io/fs-repo-migrations/v${FS_MIGRATE_VERSION}/fs-repo-migrations_v${FS_MIGRATE_VERSION}_${IPFS_DIST_OS}-amd64.tar.gz

        tar -C $GITHUB_WORKSPACE -xzvf go-ipfs_v${GO_IPFS_VERSION}_${IPFS_DIST_OS}-amd64.tar.gz
        echo "${GITHUB_WORKSPACE}/go-ipfs" >> $GITHUB_PATH

        mv go-ipfs/ipfs go-ipfs/ipfs-${GO_IPFS_VERSION}

        tar -C $GITHUB_WORKSPACE -xzvf fs-repo-migrations_v${FS_MIGRATE_VERSION}_${IPFS_DIST_OS}-amd64.tar.gz
        echo "${GITHUB_WORKSPACE}/fs-repo-migrations" >> $GITHUB_PATH

    - name: Fetch IPFS dists (windows)
      if: startsWith(matrix.os, 'windows')
      run: |
        wget https://dist.ipfs.io/go-ipfs/v${GO_IPFS_VERSION}/go-ipfs_v${GO_IPFS_VERSION}_${IPFS_DIST_OS}-amd64.zip
        wget https://dist.ipfs.io/fs-repo-migrations/v${FS_MIGRATE_VERSION}/fs-repo-migrations_v${FS_MIGRATE_VERSION}_${IPFS_DIST_OS}-amd64.zip

        unzip go-ipfs_v${GO_IPFS_VERSION}_${IPFS_DIST_OS}-amd64.zip
        unzip fs-repo-migrations_v${FS_MIGRATE_VERSION}_${IPFS_DIST_OS}-amd64.zip

      shell: bash

    - name: Fetch libmagic database (windows)
      if: startsWith(matrix.os, 'windows')
      run: |
        wget https://github.com/nscaife/file-windows/releases/download/20170108/file-windows-20170108.zip
        unzip file-windows-20170108.zip "magic.mgc"
      shell: bash

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pytest
        #pip install -r requirements-dev.txt
        #pip install -r requirements.txt

    - name: Create virtual environment
      if: startsWith(matrix.os, 'ubuntu') || startsWith(matrix.os, 'mac')
      run: |
        python -m venv "${GITHUB_WORKSPACE}/venvg"
        source ${GITHUB_WORKSPACE}/venvg/bin/activate

    - name: Create virtual environment (win)
      if: startsWith(matrix.os, 'windows')
      run: |
        python -m venv venvg
        ./venvg/Scripts/activate.bat

    - name: Virtual environment install
      if: startsWith(matrix.os, 'ubuntu') || startsWith(matrix.os, 'mac')
      run: |
        pip install --upgrade pip
        pip install wheel
        pip install -r requirements-dev.txt
        pip install -r requirements.txt

        # Build UI and docs, install and build sdist and bwheel
        python setup.py build build_docs install
        python setup.py sdist bdist_wheel

    - name: Virtual environment install (win)
      if: startsWith(matrix.os, 'windows')
      run: |
        pip install --upgrade pip
        pip install wheel
        pip install -r requirements.txt
        python setup.py build build_docs install
        python setup.py sdist bdist_wheel

    - name: Build AppImage
      if: startsWith(matrix.os, 'ubuntu')
      run: |
        cd AppImage
        ./appimage-build
        cd ..

    - name: Build DMG
      if: startsWith(matrix.os, 'macOS')
      run: |
        ./ci/build-dmg.sh

    - name: Build EXE (one-file)
      if: startsWith(matrix.os, 'windows')
      run: |
        ./ci/build-pyinstaller-exe.sh ${{ env.G_WHEEL_PATH }}
      shell: bash

    - name: Build EXE (folder zip)
      if: startsWith(matrix.os, 'windows')
      run: |
        rm -rf dist
        ./ci/build-pyinstaller-zip.sh ${{ env.G_WHEEL_PATH }}
      shell: bash

    - name: Release main asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.CI_TOKEN }}
      with:
        upload_url: ${{ needs.create_release.outputs.upload_url }}
        asset_name: ${{ env.BUNDLE_FILENAME }}
        asset_path: ${{ env.BUNDLE_PATH }}
        asset_content_type: application/octet-stream

    - name: Release extra asset
      if: startsWith(matrix.os, 'windows')
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.CI_TOKEN }}
      with:
        upload_url: ${{ needs.create_release.outputs.upload_url }}
        asset_name: ${{ env.BUNDLE_EXTRA_FILENAME }}
        asset_path: ${{ env.BUNDLE_EXTRA_PATH }}
        asset_content_type: application/octet-stream

  create_release:
    name: Create release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}

    env:
      GITHUB_TOKEN: ${{ secrets.CI_TOKEN }}
      TAGNAME: continuous-newci

    steps:
      - uses: actions/checkout@v2
      - name: Set up Python 3.7
        uses: actions/setup-python@v2
        with:
          python-version: 3.7

      - name: Release config
        id: release_config
        run: |
          echo "G_VERSION=$(cat galacteek/version)" >> $GITHUB_ENV
          echo "COMMIT_SHORT=$(echo $GITHUB_SHA|cut -c 1-8)" >> $GITHUB_ENV
          echo "GIT_BRANCH=${GITHUB_REF##*/}" >> $GITHUB_ENV
          echo "TAGNAME=continuous-${GITHUB_REF##*/}" >> $GITHUB_ENV
        shell: bash

      - name: Release config (b)
        id: release_config_b
        if:
          contains('
            refs/heads/master
            refs/tags/v
          ', github.ref)
        run: |
          echo "TAGNAME=${G_VERSION}" >> $GITHUB_ENV

      - name: Remove previous release
        run: |
          curl -H "Accept: application/vnd.github.v3+json" -H "Authorization: token ${{ github.token }}" -XDELETE https://api.github.com/repos/pinnaculum/galacteek/git/refs/tags/${{ env.TAGNAME }}
          curl -H "Accept: application/vnd.github.v3+json" -H "Authorization: token ${{ github.token }}" -XDELETE https://api.github.com/repos/pinnaculum/galacteek/releases/${{ env.TAGNAME }}
          curl -H "Accept: application/vnd.github.v3+json" -H "Authorization: token ${{ github.token }}" -XDELETE https://api.github.com/repos/pinnaculum/galacteek/releases/tag/${{ env.TAGNAME }}

      - name: Get Changelog Entry
        id: changelog
        uses: mindsers/changelog-reader-action@v2
        with:
          validation_depth: 10
          version: ${{ env.G_VERSION }}
          path: ./CHANGELOG.md

      - name: Create release
        id: create_release
        uses: actions/create-release@v1

        with:
          prerelease: true
          tag_name: ${{ env.TAGNAME}}
          release_name: Galacteek ${{ env.G_VERSION }}
          draft: false
          body: |
            # Galacteek ${{ env.G_VERSION }} released!

            ## Release log

            ${{ steps.changelog.outputs.changes }}

            # Using the AppImage

            After downloading the AppImage, make it executable and then run it:

            > chmod +x Galacteek-${{ env.G_VERSION }}-x86_64.AppImage
            ./Galacteek-${{ env.G_VERSION }}-x86_64.AppImage

            The AppImage does **not** bundle libstdc++. If you use a Linux system with an old libstdc++ and cannot run the AppImage, please open an issue.

            Be sure to install all the **gstreamer** packages to be able to use the mediaplayer.

            Trouble with running the AppImage ? [Check the wiki](https://github.com/pinnaculum/galacteek/wiki/AppImage#troubleshooting) or [file an issue](https://github.com/pinnaculum/galacteek/issues/new?assignees=&labels=appimage&template=appimage-issue.md&title=Cannot+run+the+AppImage)

            # Using the DMG image

            After opening/mounting the DMG image, hold Control and click on the **galacteek** icon, select **Open** and then accept. You probably need to allow the system to install applications *from anywhere* in the security settings.
