image: "registry.gitlab.com/galacteek/galacteek-docker-debian-base:latest"

variables:
  DEBIAN_FRONTEND: noninteractive

  GALACTEEK_VERSION: 5.0.1
  GO_IPFS_VERSION: 0.9.0
  FS_MIGRATE_VERSION: 2.0.1
  IPFS_DIST_OS: linux

  GALACTEEK_ENV_FILE: "${CI_PROJECT_DIR}/galacteek-gitlab-env.sh"

  ARTIFACT_RELEASE: "${CI_PROJECT_DIR}/galacteek-gitlab-release-env.sh"
  ARTIFACT_RELEASE_URL: "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/${CI_PROJECT_NAME}/galacteek-gitlab-release-env.sh"

  APPIMAGE_FILENAME: "Galacteek-${GALACTEEK_VERSION}-x86_64.AppImage"

  APPIMAGE_ASSET_URL: "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/${CI_PROJECT_NAME}/${GALACTEEK_VERSION}/Galacteek-${GALACTEEK_VERSION}-x86_64.AppImage"

  ASSETS_ROOT: "${CI_PROJECT_DIR}/assets"
  IPFS_BINPATH: "${CI_PROJECT_DIR}/ipfs-bin"

.ipfs_script_template:
  before_script:
    - ipfs version
    - ipfs init
    - nohup ipfs daemon &
    - sleep 3

    - ipfs pin remote service add origin $IPFS_RPS_ENDPOINT $IPFS_RPS_TOKEN

stages:
  - prepare
  - build
  - upload
  - release

prepare:
  stage: prepare
  script:
    - echo "export G_VERSION=$(cat galacteek/VERSION)" > $GALACTEEK_ENV_FILE
    - echo "export COMMIT_SHORT=$CI_COMMIT_SHA" >> $GALACTEEK_ENV_FILE
    - echo "export GIT_BRANCH=$CI_COMMIT_BRANCH" >> $GALACTEEK_ENV_FILE

    - echo "export BUNDLE_PATH=${ASSETS_ROOT}/Galacteek-${GALACTEEK_VERSION}-x86_64.AppImage" >> $GALACTEEK_ENV_FILE

    - export

  artifacts:
    paths:
      - $GALACTEEK_ENV_FILE

build:
  extends:
    - .ipfs_script_template
  stage: build
  script:
    - source $GALACTEEK_ENV_FILE
    - mkdir -p $ASSETS_ROOT

    - python -m venv venvg
    - source venvg/bin/activate

    - pip install wheel
    - pip install -r requirements-dev.txt
    - pip install -r requirements.txt
    - pip install -e '.[ui-pyqt-5.15]'

    - python setup.py build build_docs install
    - python setup.py sdist bdist_wheel

    - cd AppImage; ./appimage-build-gitlab

    - export CID=$(ipfs add -rQ --cid-version 1 "$ASSETS_ROOT" | tail -1)

    - echo "export APPIMAGE_ASSET_PATH=$BUNDLE_PATH" > $ARTIFACT_RELEASE
    - echo "export APPIMAGE_CID=$CID" >> $ARTIFACT_RELEASE

  artifacts:
    paths:
      - $ARTIFACT_RELEASE

upload:
  extends:
    - .ipfs_script_template
  stage: upload
  rules:
    - if: $CI_COMMIT_BRANCH =~ /^master$/
      when: always
    - if: $CI_COMMIT_MESSAGE =~ /\[appimage-deploy\]/
      when: always
    - if: $CI_COMMIT_MESSAGE =~ /\[deploy\]/
      when: always
  script:
    - source $GALACTEEK_ENV_FILE
    - source $ARTIFACT_RELEASE

    - apt-get -o Dpkg::Options::="--force-confold" -o Dpkg::Options::="--force-confdef" -q -y --force-yes install wget curl

    # pin remote: force-remove and add
    - ipfs pin remote rm --service=origin --name="galacteek-$G_VERSION" --force
    # - ipfs pin remote add --service=origin --name="galacteek-$G_VERSION" $APPIMAGE_CID

    - |
      curl --header "JOB-TOKEN: ${CI_JOB_TOKEN}" --upload-file ${APPIMAGE_ASSET_PATH} ${APPIMAGE_ASSET_URL}

    - >
      curl --header "JOB-TOKEN: $CI_JOB_TOKEN"
      --upload-file ${APPIMAGE_ASSET_PATH}
      ${ARTIFACT_ASSET_URL}
 

release:
  image: registry.gitlab.com/gitlab-org/release-cli
  stage: release
  rules:
    - if: $CI_COMMIT_BRANCH =~ /^master$/
      when: always
    - if: $CI_COMMIT_MESSAGE =~ /\[appimage-deploy\]/
      when: always
    - if: $CI_COMMIT_MESSAGE =~ /\[deploy\]/
      when: always
  script:
    - source $GALACTEEK_ENV_FILE
    - source $ARTIFACT_RELEASE

    - apk add bash grep git curl wget

    # Upload the artifact
    - >
      curl --header "JOB-TOKEN: $CI_JOB_TOKEN"
      --upload-file
      ${ARTIFACT_RELEASE}
      ${ARTIFACT_RELEASE_URL}

    # Create release
    - >
      release-cli create
      --name release-branch-$CI_JOB_ID
      --description release-branch-$CI_COMMIT_REF_NAME-$CI_JOB_ID
      --tag-name job-$CI_JOB_ID
      --ref $CI_COMMIT_SHA
      --assets-link '{"name":"$APPIMAGE_FILENAME","url":"${APPIMAGE_ASSET_URL}"}'
